apply plugin: 'com.android.library'
apply from: '../build-config/gradle-quality.gradle'
apply plugin: 'maven-publish'

dependencies {
    compileOnly "com.google.android.gms:play-services-gcm:$playServicesVersion"
    compileOnly "androidx.work:work-runtime:$workVersion"

    //noinspection GradleCompatible,GradleDependency
    api 'androidx.core:core:1.7.0'

    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'com.squareup.assertj:assertj-android:1.1.1'
    androidTestImplementation "com.google.android.gms:play-services-gcm:$playServicesVersion"
    androidTestImplementation "androidx.work:work-runtime:$workVersion"
    androidTestImplementation "androidx.work:work-testing:$workVersion"

    androidTestImplementation "com.facebook.stetho:stetho:$stethoVersion"
    androidTestImplementation 'androidx.appcompat:appcompat:1.3.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation 'androidx.test:core:1.4.0'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    resourcePrefix 'job_'

    useLibrary 'android.test.mock'

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)

        consumerProguardFiles 'proguard.cfg'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "evernote-${variant.name}.aar"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError true
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    publishing {
        singleVariant("release") {
        }
    }
}
def libraryGroupId = 'com.mobiledatalabs'
def libraryArtifactId = 'evernote'
def libraryVersion = '1.0.2'

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("local.properties")))

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId libraryGroupId
                artifactId libraryArtifactId
                version = libraryVersion
            }
        }


        publications {
            aar(MavenPublication) {
                groupId libraryGroupId
                version libraryVersion
                artifactId libraryArtifactId
                artifact("$buildDir/outputs/aar/${artifactId}-release.aar")

                println "generating aar " + artifactId

                // generate pom nodes for dependencies
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    println "dependencies" + configurations.releaseCompileClasspath

                    configurations.releaseCompileClasspath.allDependencies.each {
                        if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "mileiq-evernote-android-job"
                url 'https://maven.pkg.github.com/mileiq/mileiq-evernote-android-job'
                credentials {
                    username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                    password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
                }
            }
        }
    }
}

//apply from: '../build-config/gradle-push.gradle'